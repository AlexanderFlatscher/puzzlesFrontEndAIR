<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="100%" height="100%"
		 creationComplete="creationCompleteHandler(event)"
		 xmlns:components="components.*" xmlns:models="models.*" xmlns:layouts="layouts.*">
	<fx:Declarations>
		<s:HTTPService id="showBattle" method="GET" result="showBattleResultHandler(event)" resultFormat="xml" fault="faultHandler(event)" />
		<s:HTTPService id="updateCardInGame" url="http://localhost:3000/card_in_games/"  method="POST" result="updateCardInGameResultHandler(event)" resultFormat="xml" fault="faultHandler(event)" />
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import events.BattleEvent;
			
			import models.CardVO;
			
			import mx.collections.ArrayCollection;
			import mx.collections.XMLListCollection;
			import mx.events.DragEvent;
			import mx.events.ItemClickEvent;
			import mx.managers.DragManager;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			

			[Bindable]
			private var myStatus:String;
			
			[Bindable]
			private var myMana:int;
			
			[Bindable]
			private var myHealth:int;
			
			[Bindable]
			private var myHand:ArrayCollection;
			
			[Bindable]
			private var myDeck:ArrayCollection;
			
			[Bindable]
			private var mySpells:ArrayCollection;
			
			[Bindable]
			private var myCemetery:ArrayCollection;
			
			[Bindable]
			private var myUnits:ArrayCollection;
			
			protected function creationCompleteHandler(e:Event):void{
				deckList.addEventListener(ItemClickEvent.ITEM_CLICK, deckItemClickHandler);
			}
			
			public function openBattle(battleID:int):void {
				sendShowBattleRequest(battleID);
			}
			
			private function deckItemClickHandler(e:ItemClickEvent):void{
				if(myHand.length < 5){
					myHand.addItem((myDeck.removeItemAt(e.index)));
					
					sendUpdateCardInGameRequest(e.item.id, "draw");
				}
			}
			
			
			// ---- http requests ------------------------------------------------------------------------
			
			protected function faultHandler(e:FaultEvent):void
			{
				trace("fault! statusCode: " + e.statusCode);
			}
			
			private function sendShowBattleRequest(battleID:int):void{
				trace("show battle request sent");
				showBattle.url = "http://localhost:3000/battles/" + battleID + ".xml";
				showBattle.send();
			}
			
			protected function showBattleResultHandler(e:ResultEvent):void
			{
				trace("request result");
				var xml:XML = new XML(e.result);
				myStatus = xml.Fighter[0].attribute("status");
				myMana = xml.Fighter[0].attribute("mana");
				myHealth = xml.Fighter[0].attribute("health");
				
				var card:XML;
				
				myHand = new ArrayCollection();
				for each(card in xml.Fighter[0].Hand.Card){
					myHand.addItem(new CardVO(card.id, card.type, card.targetType, card.name, card.image, card.description, card.talent));
				}
				
				myDeck = new ArrayCollection();
				for each(card in xml.Fighter[0].Deck.Card){
					myDeck.addItem(new CardVO(card.id, card.type, card.targetType, card.name, card.image, card.description, card.talent));
				}
				
				myUnits = new ArrayCollection();
				for each(card in xml.Fighter[0].Units.Card){
					myUnits.addItem(new CardVO(card.id, card.type, card.targetType, card.name, card.image, card.description, card.talent));
				}
				
				mySpells = new ArrayCollection();
				for each(card in xml.Fighter[0].Spells.Card){
					mySpells.addItem(new CardVO(card.id, card.type, card.targetType, card.name, card.image, card.description, card.talent));
				}
				
				myCemetery = new ArrayCollection();
				for each(card in xml.Fighter[0].Cemetery.Card){
					myCemetery.addItem(new CardVO(card.id, card.type, card.targetType, card.name, card.image, card.description, card.talent));
				}
			}
			
			private function sendUpdateCardInGameRequest(cardID:int, action:String):void{
				trace("update card in game request sent");
				updateCardInGame.url += cardID.toString();
				trace(updateCardInGame.url);
				updateCardInGame.send({_method: "PUT", event: action});
				updateCardInGame.url = "http://localhost:3000/card_in_games/";
			}
			
			protected function updateCardInGameResultHandler(e:ResultEvent):void
			{
				trace("update card in game request result");
				if(e.statusCode == 200)
					trace("200 ok");
				else
					trace("fail: " + e.statusCode);
			}

			
			
			// drag n drop
			
			private function unitsDragEnterHandler(e:DragEvent):void
			{
				var dragTarget:List = e.currentTarget as List;
				var dragTargetNumChildren:int = dragTarget.dataProvider.length;
				
				var draggedCard:Object = (e.dragInitiator as List).selectedItem;
				
				if(draggedCard.type != "Unit" && dragTargetNumChildren == 0 || draggedCard.type != "Spell" && dragTargetNumChildren > 0){ // TODO need to know if spell targets a unit (unit spell, upgrade, buff, ...)
					e.preventDefault();
				}
			}

			protected function unitsDragDropHandler(e:DragEvent):void
			{
				var draggedCard:Object = (e.dragInitiator as List).selectedItem;
				sendUpdateCardInGameRequest(draggedCard.id, "place_unit");
				// reduce mana
			}
			
			private function spellsDragEnterHandler(e:DragEvent):void
			{
				var obj:Object = (e.dragInitiator as List).selectedItem;
				if(obj.type != "Spell")
					e.preventDefault();
			}
			
			protected function spellsDragDropHandler(e:DragEvent):void
			{
				var draggedCard:Object = (e.dragInitiator as List).selectedItem;
				sendUpdateCardInGameRequest(draggedCard.id, "cast");
				// reduce mana
			}


		]]>
	</fx:Script>
	
	<s:HGroup width="100%" bottom="200">
		
		<s:Rect width="50%" />
		
		<s:Panel title="Units" width="500">			
			<s:List itemRenderer="renderers.CardItemRenderer"
					dataProvider="{new ArrayCollection()}"
					dropEnabled="true" dragEnter="unitsDragEnterHandler(event)" dragDrop="unitsDragDropHandler(event)"
					height="200" width="100">
				
				<s:layout>
					<layouts:OverlapCardsLayout />
				</s:layout>
			</s:List>
		</s:Panel>
		
		<s:Rect width="50%" />

	</s:HGroup>
	
	<s:HGroup gap="0" bottom="430" right="130">
			
		<s:Panel title="Spells" width="200">
			<s:List width="200" height="100"
					dropEnabled="true" dragEnter="spellsDragEnterHandler(event)"
					itemRenderer="renderers.CardItemRenderer"
					dataProvider="{mySpells}">
				
			</s:List>
		</s:Panel>
		
		<s:Panel title="Cemetery" width="100" rotation="270">
			<s:List height="100" width="100" itemRenderer="renderers.CardItemRenderer" dataProvider="{myCemetery}" />
		</s:Panel>
	</s:HGroup>	

	<s:HGroup bottom="0" gap="0" width="100%">
		
		<s:Rect width="50%" />
		
		<s:Panel title="Hand" width="500">
			<s:List id="handList" itemRenderer="renderers.CardItemRenderer" dataProvider="{myHand}"
					dragEnabled="true" dragMoveEnabled="true"
					height="100" width="500">
				
				<s:layout>
					<s:HorizontalLayout />
				</s:layout>
				
			</s:List>
		</s:Panel>
		
		<s:Rect width="50%" />
		
	</s:HGroup>

	
	<s:Panel title="Deck" width="100" bottom="0" right="0">
		<s:List id="deckList" height="100" width="100" itemRenderer="renderers.CardItemRenderer" dataProvider="{myDeck}">
			
			<s:layout>
				<s:VerticalLayout />
			</s:layout>
			
		</s:List>
	</s:Panel>
	
	
</s:Group>
