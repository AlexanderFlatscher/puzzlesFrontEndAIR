<?xml version="1.0" encoding="utf-8"?>
<s:Group xmlns:fx="http://ns.adobe.com/mxml/2009" 
		 xmlns:s="library://ns.adobe.com/flex/spark" 
		 xmlns:mx="library://ns.adobe.com/flex/mx" width="400" height="300" xmlns:components="components.*" creationComplete="creationCompleteHandler(event)">
	<fx:Declarations>
		<s:Elastic id="elasticEasing" />
		<s:Power id="powerEasing" />
		
		<s:HTTPService id="indexBattles" url="http://localhost:3000/battles/" method="GET" result="indexBattlesResultHandler(event)" resultFormat="xml" fault="faultHandler(event)" />
	</fx:Declarations>
	
	<fx:Script>
		<![CDATA[
			import com.facebook.graph.FacebookDesktop;
			
			import events.BattleEvent;
			
			import mx.effects.easing.Elastic;
			import mx.events.FlexEvent;
			import mx.rpc.events.FaultEvent;
			import mx.rpc.events.ResultEvent;
			
			import spark.effects.easing.EaseInOutBase;
			import spark.effects.easing.Elastic;
			
			
			public var fbid:String;

			protected function creationCompleteHandler(e:FlexEvent):void {
				indexBattles.send({fb_id: fbid, format: 'xml'});
			}
			
			// ---- http requests -------------------------------------------------------------------
			
			protected function indexBattlesResultHandler(e:ResultEvent):void {
				trace("result: " + e.message);
				
				var xml:XML = new XML(e.result);
				
				for each(var battle:XML in xml.Battle){
					
					// should be replaced with a better (server side) solution
					var myID:int, opponentID:int;
					
					if(battle.Fighter[0].fb_id == fbid){
						myID = 0;
						opponentID = 1;
					}
					else {
						myID = 1;
						opponentID = 0;
					}
					
					// add battle menu item to battle section
					var battleMenuItem:BattleMenuItem = new BattleMenuItem();
					battleMenuItem.battleID = battle.attribute('id');
					
					FacebookDesktop.api('/' + battle.Fighter[opponentID].fb_id, function(success:Object, fail:Object):void{
						if(success){
							battleMenuItem.opponentName = success.name;
						}
						else {
							trace(fail);
						}
					});
					
					battleMenuItem.playerState = battle.Fighter[myID].attribute("status");
					
					battlesNavigatorContent.addElement(battleMenuItem);
				}
			}
			
//			private function fbApiOpponentName(success:Object, fail:Object):void {
//				
//				
//				
//			}
			
			protected function faultHandler(e:FaultEvent):void {
				trace("fault: " + e.message);
			}
			

		]]>
	</fx:Script>
	
	<s:states>
		<s:State name="menu" />
		<s:State name="subMenu" />
		<!--<s:State name="game" stateGroups="subMenu" />
		<s:State name="deck" stateGroups="subMenu" />
		<s:State name="achievement" stateGroups="subMenu" />-->
	</s:states>
	
	<s:transitions>
		<s:Transition fromState="menu" toState="subMenu">
			<s:Parallel>
				<s:Fade target="{menu}" />
				<s:Move target="{menu}" />
				<s:Fade target="{subMenu}" />
				<s:Move target="{subMenu}" />
			</s:Parallel>
		</s:Transition>
		<s:Transition fromState="subMenu" toState="menu">
			<s:Parallel>
				<s:Fade target="{subMenu}" />
				<s:Move target="{subMenu}" />
				<s:Fade target="{menu}" />
				<s:Move target="{menu}" />
			</s:Parallel>
		</s:Transition>

	</s:transitions>
	
	<s:Panel title="Menu" id="menu" x="0" x.subMenu="{-menu.width}" alpha="1" alpha.subMenu="0">
		<components:HoverAccordion width="500" height="400" resizeToContent="true" openDuration="250">
			<s:NavigatorContent label="Battles" id="battlesNavigatorContent">
				<s:layout>
					<s:VerticalLayout />
				</s:layout>
				<s:Label text="es geht so vü einfocher ---.---" />
				<s:Button label="subMenu state" click="currentState='subMenu'" />
			</s:NavigatorContent>
			<s:NavigatorContent label="Decks">
				<s:layout>
					<s:VerticalLayout />
				</s:layout>
				<s:Label text="es geht so vü einfocher ---.---" />
			</s:NavigatorContent>
			<s:NavigatorContent label="Achievements">
				<s:layout>
					<s:VerticalLayout />
				</s:layout>
				<s:Label text="es geht so vü einfocher ---.---" />
			</s:NavigatorContent>
		</components:HoverAccordion>
	</s:Panel>
	
	<s:Panel title="subMenu" id="subMenu" width="500" x="0" x.menu="{this.width}" alpha="1" alpha.menu="0">
		<s:layout>
			<s:VerticalLayout />
		</s:layout>
		<s:Label text="subMenu" />
		<s:Button label="back" click="currentState='menu'" />
	</s:Panel>
	
</s:Group>
